[{"type":"tab","id":"2153ec83.169f54","label":"Email Tachos"},{"type":"tab","id":"8dc244e1.fc02c8","label":"Alarm Driver Card Reading"},{"type":"tab","id":"544f6ee3.2cd5a","label":"Alarm Vehicle Tachograph Reading"},{"id":"b21e0c9e.b81ff","type":"scheduler","z":"2153ec83.169f54","outtopic":"","outpayload1":"","outpayload2":"","name":"Scheduler","lat":"43.52249","lon":"-5.61155","start":"sunrise","end":"sunset","starttime":"1365","endtime":"1395","duskoff":"0","dawnoff":"0","outtext1":"ON","outtext2":"OFF","sun":true,"mon":true,"tue":true,"wed":true,"thu":true,"fri":true,"sat":true,"jan":true,"feb":true,"mar":true,"apr":true,"may":true,"jun":true,"jul":true,"aug":true,"sep":true,"oct":true,"nov":true,"dec":true,"repeat":false,"atstart":true,"x":121,"y":131,"wires":[[],[],["b8fec780.8dea68"]]},{"id":"723995d8.9df14c","type":"function","z":"2153ec83.169f54","name":"Email Tachos","func":"console.log('Start Email Tachos node');\n\n//var fs = context.global.fs;\nvar Imap = context.global.imap;\nvar base64 = context.global.base64Stream;\nvar streamm = context.global.stream;\nvar request = context.global.request;\n\n// get organization active\nvar organization = msg.payload;\n\nif (organization.mailboxEmail === undefined)\n    return;\n\nconsole.log('Download email tachos for Organization Id: ' + organization.id + ' with name ' + organization.name);\n\nvar imap = new Imap({\n    user: organization.mailboxEmail,\n    password: organization.mailboxPassword,\n    host: 'imap.gmail.com',\n    port: 993,\n    tls: true\n});\n\nfunction findAttachmentParts(struct, attachments) {\n    attachments = attachments ||  [];\n\n    for (var i = 0, len = struct.length, r; i < len; ++i) {\n        if (Array.isArray(struct[i])) {\n            findAttachmentParts(struct[i], attachments);\n        } else {\n            if (struct[i].disposition && ['INLINE', 'ATTACHMENT'].indexOf(struct[i].disposition.type) > -1) {\n                attachments.push(struct[i]);\n            }\n        }\n    }\n\n    return attachments;\n}\n\nfunction buildAttMessageFunction(attachment) {\n    var filename = attachment.params.name;\n    var encoding = attachment.encoding;\n    \n    return function (message, seqno) {\n        var prefix = '(#' + seqno + ') ';\n\n        message.on('body', function(stream, info) {\n            //Create a write stream so that we can stream the attachment to file;\n            console.log(prefix + 'Streaming this attachment to file', filename, info);\n            \n            // create final stream\n            var bufferStream = new streamm.PassThrough();\n            if (encoding === 'BASE64') {\n                //the stream is base64 encoded, so here the stream is decode on the fly and piped to the write stream (file)\n                stream.pipe(base64.decode()).pipe(bufferStream);\n            } else  {\n                //here we have none or some other decoding streamed directly to the file which renders it useless probably\n                stream.pipe(bufferStream);\n            }\n\n            // recover the new stream and pass to the next node\n            var chunks = [];\n            bufferStream.on('data', function(data) {\n                chunks.push(data);\n            });\n\n            bufferStream.on('end', function() {\n                var body = Buffer.concat(chunks);\n                console.log('File size: ' + body.length);\n                \n                // pass to the next node\n                var formData = {\"organization\": JSON.stringify(organization), \n                                \"file\": {\"value\": body, \"options\": {\"filename\": filename}}};\n                            \n                console.log(\"Organization: \" + formData);\n                \n                request.post({url:'http://192.168.1.100:3000/services/rest/files/uploader', formData: formData}, function(err, httpResponse, body) {\n                    if (err)\n                        node.send(err);\n        \n                    console.log('Upload successful!  Server responded with:', body);\n    \n                    msg.payload = body;\n                    node.send(msg);\n                });                            \n            });\n        });\n\n        message.once('end', function() {\n            console.log(prefix + 'Finished attachment %s', filename);\n        });\n    };\n}\n\nimap.once('ready', function() {\n    imap.openBox('INBOX', false, function(err, box) {\n        if (err) throw err;\n\n        console.log('Searching emails from: ', organization.name);\n        imap.search([ 'UNSEEN', ['SINCE', 'May 24, 2016'] ], function(err, results) {\n            if (err) throw err;\n\n            if (results.length === 0)\n                return;\n\n            //var f = imap.seq.fetch('1:3', {struct: true, markSeen:true, bodies: ['HEADER.FIELDS (FROM TO SUBJECT DATE)']});\n            var f = imap.fetch(results, { struct: true, markSeen:true, bodies: '' });\n\n            f.on('message', function (msg, seqno) {\n                console.log('Message #%d', seqno);\n                var prefix = '(#' + seqno + ') ';\n\n                msg.on('body', function(stream, info) {\n                    var buffer = '';\n                    stream.on('data', function(chunk) {\n                        buffer += chunk.toString('utf8');\n                    });\n                    stream.once('end', function() {\n                        console.log(prefix + 'Parsed header: %s', Imap.parseHeader(buffer));\n                    });\n                });\n\n                msg.once('attributes', function(attrs) {\n                    var attachments = findAttachmentParts(attrs.struct);\n\n                    if (attachments === undefined)\n                        return;\n\n                    console.log(prefix + 'Has attachments: %d', attachments.length);\n                    for (var i = 0, len=attachments.length ; i < len; ++i) {\n                        var attachment = attachments[i];\n                        /*This is how each attachment looks like {\n                             partID: '2',\n                             type: 'application',\n                             subtype: 'octet-stream',\n                             params: { name: 'file-name.ext' },\n                             id: null,\n                             description: null,\n                             encoding: 'BASE64',\n                             size: 44952,\n                             md5: null,\n                             disposition: { type: 'ATTACHMENT', params: { filename: 'file-name.ext' } },\n                             language: null\n                             }\n                         */\n                        console.log(prefix + 'Fetching attachment %s', attachment.params.name);\n                        \n                        if (attachment.params.name === undefined)\n                            return;\n                            \n                        if (attachment.params.name.toUpperCase().indexOf(\".TGD\") < 0 &&\n                            attachment.params.name.toUpperCase().indexOf(\".DDD\") < 0 &&\n                            attachment.params.name.toUpperCase().indexOf(\".C1V\") < 0)\n                                return;\n                            \n                        var f = imap.fetch(attrs.uid , {bodies: [attachment.partID], struct: true });\n\n                        //build function to process attachment message\n                        f.on('message', buildAttMessageFunction(attachment));\n                    }\n                });\n                msg.once('end', function() {\n                    console.log(prefix + 'Finished email');\n                });\n            });\n\n            f.once('error', function(err) {\n                console.log('Fetch error: ' + err);\n            });\n\n            f.once('end', function() {\n                console.log('Done fetching all messages!');\n                imap.end();\n            });\n        });\n    });\n});\n\nimap.once('error', function(err) {\n    console.log(err);\n});\n\nimap.once('end', function() {\n    console.log('Connection ended');\n});\n\nimap.connect();\n\nreturn;","outputs":1,"noerr":0,"x":652,"y":289,"wires":[["67dfeb62.495974"]]},{"id":"b8fec780.8dea68","type":"http request","z":"2153ec83.169f54","name":"Get Organizations","method":"GET","ret":"obj","url":"http://localhost:3000/services/rest/Organizations?filter={\"where\": {\"mailboxEmail\": {\"neq\":  null }}}","x":225,"y":289,"wires":[["430093b1.e6494c"]]},{"id":"430093b1.e6494c","type":"splitter","z":"2153ec83.169f54","name":"Organizations Loop","property":"payload","x":444,"y":289,"wires":[["723995d8.9df14c"]]},{"id":"67dfeb62.495974","type":"debug","z":"2153ec83.169f54","name":"","active":true,"console":"false","complete":"false","x":738,"y":131,"wires":[]},{"id":"6105f08a.72ab","type":"scheduler","z":"8dc244e1.fc02c8","outtopic":"","outpayload1":"","outpayload2":"","name":"Scheduler","lat":"43.52254","lon":"-5.6115","start":"sunrise","end":"sunset","starttime":"1380","endtime":"1395","duskoff":"0","dawnoff":"0","outtext1":"ON","outtext2":"OFF","sun":true,"mon":true,"tue":true,"wed":true,"thu":true,"fri":true,"sat":true,"jan":true,"feb":true,"mar":true,"apr":true,"may":true,"jun":true,"jul":true,"aug":true,"sep":true,"oct":true,"nov":true,"dec":true,"repeat":false,"atstart":true,"x":171,"y":98,"wires":[[],[],["6fc09bcd.0ced04"]]},{"id":"6fc09bcd.0ced04","type":"http request","z":"8dc244e1.fc02c8","name":"Alarm","method":"POST","ret":"obj","url":"http://localhost:3000/services/rest/Drivers/alarmLastCardReading","x":332,"y":111,"wires":[["298903b3.2b493c"]]},{"id":"4cfeb8a.f788448","type":"function","z":"8dc244e1.fc02c8","name":"Publish Events","func":"console.log('Check Driver Tachos Reading');\n\nvar request = context.global.request;\n\n// get driver active\nvar driver = msg.payload;\nvar MAX_DAYS = 3;\n\nif (driver.length === 0)\n    return;\n    \nif (driver.days < MAX_DAYS) {\n    var eventt = {\n                  \"organizationId\": driver.organizationId,\n                  \"description\": \"El conductor \" + driver.name + \" le quedan menos de tres días para descargar la tarjeta de conductor\",\n                  \"date\": new Date(),\n                  \"type\": \"Warning\",\n                  \"confirm\": false\n                 };\n    \n    request.post({ url:'http://192.168.1.100:3000/services/rest/Events/events/pushEvent', \n                   json: true,\n                   body: eventt}, function(err, httpResponse, body) {\n        if (err)\n            node.send(err);\n\n        console.log('Alarm sent successfuly!. Server responded with:', body);\n\n        msg.payload = body;\n        node.send(msg);\n    }); \n}\n\nreturn msg;","outputs":1,"noerr":0,"x":615,"y":238,"wires":[["b8f2bc2c.3922b"]]},{"id":"b8f2bc2c.3922b","type":"debug","z":"8dc244e1.fc02c8","name":"","active":true,"console":"false","complete":"false","x":755,"y":106,"wires":[]},{"id":"423ad013.dfa09","type":"scheduler","z":"544f6ee3.2cd5a","outtopic":"","outpayload1":"","outpayload2":"","name":"Scheduler","lat":"43.52254","lon":"-5.6115","start":"sunrise","end":"sunset","starttime":"1380","endtime":"1395","duskoff":"0","dawnoff":"0","outtext1":"ON","outtext2":"OFF","sun":true,"mon":true,"tue":true,"wed":true,"thu":true,"fri":true,"sat":true,"jan":true,"feb":true,"mar":true,"apr":true,"may":true,"jun":true,"jul":true,"aug":true,"sep":true,"oct":true,"nov":true,"dec":true,"repeat":false,"atstart":true,"x":150,"y":107,"wires":[[],[],["768398e1.4bfe68"]]},{"id":"768398e1.4bfe68","type":"http request","z":"544f6ee3.2cd5a","name":"Alarm","method":"POST","ret":"obj","url":"http://localhost:3000/services/rest/Vehicles/alarmLastVehicleReading","x":306,"y":120,"wires":[["a60052d4.ebbe5"]]},{"id":"3d955fdd.efff1","type":"function","z":"544f6ee3.2cd5a","name":"Publish Events","func":"console.log('Check Vehicle Tachos Reading');\n\nvar request = context.global.request;\n\n// get driver active\nvar vehicle = msg.payload;\n\nif (vehicle.length === 0)\n    return;\n    \nif (vehicle.days < MAX_DAYS) {\nvar eventt = {\n                \"organizationId\": vehicle.organizationId,\n                \"description\": \"El vehículo con mátricula \" + vehicle.registration + \" le quedan menos de tres días para descargar el tacógrafo\",\n                \"date\": new Date(),\n                \"type\": \"Warning\",\n                \"confirm\": false\n             };\n    \n    request.post({ url:'http://192.168.1.100:3000/services/rest/Events/events/pushEvent', \n                   json: true,\n                   body: eventt}, function(err, httpResponse, body) {\n        if (err)\n            node.send(err);\n\n        console.log('Alarm sent successfuly!. Server responded with:', body);\n\n        msg.payload = body;\n        node.send(msg);\n    });    \n}\n\nreturn msg;","outputs":1,"noerr":0,"x":606,"y":280,"wires":[["5ae2b5ad.a1e87c"]]},{"id":"5ae2b5ad.a1e87c","type":"debug","z":"544f6ee3.2cd5a","name":"","active":true,"console":"false","complete":"false","x":756,"y":123,"wires":[]},{"id":"298903b3.2b493c","type":"splitter","z":"8dc244e1.fc02c8","name":"Driver Loop","property":"payload","x":425,"y":238,"wires":[["4cfeb8a.f788448"]]},{"id":"a60052d4.ebbe5","type":"splitter","z":"544f6ee3.2cd5a","name":"Vehicle Loop","property":"payload","x":419,"y":280,"wires":[["3d955fdd.efff1"]]}]